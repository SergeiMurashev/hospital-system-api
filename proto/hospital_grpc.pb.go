// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: hospital.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HospitalService_CreateHospital_FullMethodName = "/hospital.HospitalService/CreateHospital"
	HospitalService_GetHospital_FullMethodName    = "/hospital.HospitalService/GetHospital"
	HospitalService_UpdateHospital_FullMethodName = "/hospital.HospitalService/UpdateHospital"
	HospitalService_DeleteHospital_FullMethodName = "/hospital.HospitalService/DeleteHospital"
	HospitalService_ListHospitals_FullMethodName  = "/hospital.HospitalService/ListHospitals"
	HospitalService_GetRooms_FullMethodName       = "/hospital.HospitalService/GetRooms"
)

// HospitalServiceClient is the client API for HospitalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Hospital service definition
type HospitalServiceClient interface {
	CreateHospital(ctx context.Context, in *CreateHospitalRequest, opts ...grpc.CallOption) (*Hospital, error)
	GetHospital(ctx context.Context, in *GetHospitalRequest, opts ...grpc.CallOption) (*Hospital, error)
	UpdateHospital(ctx context.Context, in *UpdateHospitalRequest, opts ...grpc.CallOption) (*Hospital, error)
	DeleteHospital(ctx context.Context, in *DeleteHospitalRequest, opts ...grpc.CallOption) (*DeleteHospitalResponse, error)
	ListHospitals(ctx context.Context, in *ListHospitalsRequest, opts ...grpc.CallOption) (*ListHospitalsResponse, error)
	GetRooms(ctx context.Context, in *GetRoomsRequest, opts ...grpc.CallOption) (*GetRoomsResponse, error)
}

type hospitalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHospitalServiceClient(cc grpc.ClientConnInterface) HospitalServiceClient {
	return &hospitalServiceClient{cc}
}

func (c *hospitalServiceClient) CreateHospital(ctx context.Context, in *CreateHospitalRequest, opts ...grpc.CallOption) (*Hospital, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Hospital)
	err := c.cc.Invoke(ctx, HospitalService_CreateHospital_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospitalServiceClient) GetHospital(ctx context.Context, in *GetHospitalRequest, opts ...grpc.CallOption) (*Hospital, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Hospital)
	err := c.cc.Invoke(ctx, HospitalService_GetHospital_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospitalServiceClient) UpdateHospital(ctx context.Context, in *UpdateHospitalRequest, opts ...grpc.CallOption) (*Hospital, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Hospital)
	err := c.cc.Invoke(ctx, HospitalService_UpdateHospital_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospitalServiceClient) DeleteHospital(ctx context.Context, in *DeleteHospitalRequest, opts ...grpc.CallOption) (*DeleteHospitalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteHospitalResponse)
	err := c.cc.Invoke(ctx, HospitalService_DeleteHospital_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospitalServiceClient) ListHospitals(ctx context.Context, in *ListHospitalsRequest, opts ...grpc.CallOption) (*ListHospitalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHospitalsResponse)
	err := c.cc.Invoke(ctx, HospitalService_ListHospitals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospitalServiceClient) GetRooms(ctx context.Context, in *GetRoomsRequest, opts ...grpc.CallOption) (*GetRoomsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomsResponse)
	err := c.cc.Invoke(ctx, HospitalService_GetRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HospitalServiceServer is the server API for HospitalService service.
// All implementations must embed UnimplementedHospitalServiceServer
// for forward compatibility.
//
// Hospital service definition
type HospitalServiceServer interface {
	CreateHospital(context.Context, *CreateHospitalRequest) (*Hospital, error)
	GetHospital(context.Context, *GetHospitalRequest) (*Hospital, error)
	UpdateHospital(context.Context, *UpdateHospitalRequest) (*Hospital, error)
	DeleteHospital(context.Context, *DeleteHospitalRequest) (*DeleteHospitalResponse, error)
	ListHospitals(context.Context, *ListHospitalsRequest) (*ListHospitalsResponse, error)
	GetRooms(context.Context, *GetRoomsRequest) (*GetRoomsResponse, error)
	mustEmbedUnimplementedHospitalServiceServer()
}

// UnimplementedHospitalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHospitalServiceServer struct{}

func (UnimplementedHospitalServiceServer) CreateHospital(context.Context, *CreateHospitalRequest) (*Hospital, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHospital not implemented")
}
func (UnimplementedHospitalServiceServer) GetHospital(context.Context, *GetHospitalRequest) (*Hospital, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHospital not implemented")
}
func (UnimplementedHospitalServiceServer) UpdateHospital(context.Context, *UpdateHospitalRequest) (*Hospital, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHospital not implemented")
}
func (UnimplementedHospitalServiceServer) DeleteHospital(context.Context, *DeleteHospitalRequest) (*DeleteHospitalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHospital not implemented")
}
func (UnimplementedHospitalServiceServer) ListHospitals(context.Context, *ListHospitalsRequest) (*ListHospitalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHospitals not implemented")
}
func (UnimplementedHospitalServiceServer) GetRooms(context.Context, *GetRoomsRequest) (*GetRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRooms not implemented")
}
func (UnimplementedHospitalServiceServer) mustEmbedUnimplementedHospitalServiceServer() {}
func (UnimplementedHospitalServiceServer) testEmbeddedByValue()                         {}

// UnsafeHospitalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HospitalServiceServer will
// result in compilation errors.
type UnsafeHospitalServiceServer interface {
	mustEmbedUnimplementedHospitalServiceServer()
}

func RegisterHospitalServiceServer(s grpc.ServiceRegistrar, srv HospitalServiceServer) {
	// If the following call pancis, it indicates UnimplementedHospitalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HospitalService_ServiceDesc, srv)
}

func _HospitalService_CreateHospital_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHospitalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalServiceServer).CreateHospital(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospitalService_CreateHospital_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalServiceServer).CreateHospital(ctx, req.(*CreateHospitalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospitalService_GetHospital_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHospitalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalServiceServer).GetHospital(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospitalService_GetHospital_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalServiceServer).GetHospital(ctx, req.(*GetHospitalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospitalService_UpdateHospital_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHospitalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalServiceServer).UpdateHospital(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospitalService_UpdateHospital_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalServiceServer).UpdateHospital(ctx, req.(*UpdateHospitalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospitalService_DeleteHospital_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHospitalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalServiceServer).DeleteHospital(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospitalService_DeleteHospital_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalServiceServer).DeleteHospital(ctx, req.(*DeleteHospitalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospitalService_ListHospitals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHospitalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalServiceServer).ListHospitals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospitalService_ListHospitals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalServiceServer).ListHospitals(ctx, req.(*ListHospitalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospitalService_GetRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalServiceServer).GetRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospitalService_GetRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalServiceServer).GetRooms(ctx, req.(*GetRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HospitalService_ServiceDesc is the grpc.ServiceDesc for HospitalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HospitalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hospital.HospitalService",
	HandlerType: (*HospitalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHospital",
			Handler:    _HospitalService_CreateHospital_Handler,
		},
		{
			MethodName: "GetHospital",
			Handler:    _HospitalService_GetHospital_Handler,
		},
		{
			MethodName: "UpdateHospital",
			Handler:    _HospitalService_UpdateHospital_Handler,
		},
		{
			MethodName: "DeleteHospital",
			Handler:    _HospitalService_DeleteHospital_Handler,
		},
		{
			MethodName: "ListHospitals",
			Handler:    _HospitalService_ListHospitals_Handler,
		},
		{
			MethodName: "GetRooms",
			Handler:    _HospitalService_GetRooms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hospital.proto",
}
